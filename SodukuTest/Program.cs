using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using SudokuBase;
using SudokuFactory;
using SudokuGenerator;
using Console = System.Console;

namespace SudokuTest
{
    class Program
    {
        //出题，采用静态数组


        static List<List<int>> twoAnswerList = new List<List<int>>()

        {
            new List<int> {0, 4, 2, 1, 9, 7, 5, 8, 0},
            new List<int> {0, 8, 0, 4, 5, 2, 0, 9, 0},
            new List<int> {5, 9, 0, 3, 8, 6, 0, 4, 2},
            new List<int> {7, 1, 9, 2, 4, 5, 6, 3, 8},
            new List<int> {2, 5, 3, 6, 1, 8, 9, 7, 4},
            new List<int> {4, 6, 8, 7, 3, 9, 2, 5, 1},
            new List<int> {1, 2, 5, 8, 7, 3, 4, 6, 9},
            new List<int> {8, 7, 4, 9, 6, 1, 3, 2, 5},
            new List<int> {9, 3, 6, 5, 2, 4, 8, 1, 7}
        };


        static List<List<int>> Standard = new List<List<int>>()
        {
            new List<int> {0, 8, 0, 0, 0, 0, 6, 0, 0},
            new List<int> {0, 0, 0, 4, 0, 0, 0, 0, 9},
            new List<int> {0, 7, 0, 0, 0, 0, 8, 0, 5},
            new List<int> {4, 0, 0, 0, 0, 0, 0, 0, 0},
            new List<int> {0, 3, 0, 0, 6, 0, 0, 9, 0},
            new List<int> {0, 0, 0, 7, 2, 0, 1, 0, 0},
            new List<int> {0, 9, 3, 2, 0, 0, 0, 6, 4},
            new List<int> {8, 1, 0, 3, 0, 0, 0, 0, 0},
            new List<int> {0, 0, 0, 0, 0, 5, 0, 0, 0}
        };


        static List<List<int>> pu2 = new List<List<int>>()
        {
            new List<int> {0, 8, 0, 0, 0, 0, 6, 0, 0},
            new List<int> {0, 0, 0, 4, 0, 0, 0, 0, 9},
            new List<int> {0, 7, 0, 0, 0, 0, 8, 0, 5},
            new List<int> {4, 0, 0, 0, 0, 0, 0, 0, 0},
            new List<int> {0, 3, 0, 0, 6, 0, 0, 9, 0},
            new List<int> {0, 0, 0, 7, 2, 0, 1, 0, 0},
            new List<int> {0, 9, 3, 2, 0, 0, 0, 6, 4},
            new List<int> {8, 1, 0, 3, 0, 0, 0, 0, 0},
            new List<int> {0, 0, 0, 0, 0, 5, 0, 0, 0}
        };


        static List<List<int>> soduku18 = new List<List<int>>()
        {
            new List<int> {0, 0, 1, 0, 0, 0, 0, 0, 9},
            new List<int> {0, 0, 0, 2, 0, 0, 0, 4, 6},
            new List<int> {0, 0, 7, 0, 8, 0, 0, 0, 0},
            new List<int> {0, 0, 0, 0, 0, 1, 0, 0, 0},
            new List<int> {0, 0, 3, 0, 0, 0, 2, 0, 0},
            new List<int> {0, 0, 0, 5, 0, 0, 0, 0, 0},
            new List<int> {0, 0, 0, 0, 3, 0, 8, 0, 0},
            new List<int> {9, 6, 0, 0, 0, 7, 0, 0, 0},
            new List<int> {2, 0, 0, 0, 0, 0, 5, 0, 0}
        };

        static List<List<int>> soduku39 = new List<List<int>>()
        {
            new List<int> {7, 0, 5, 6, 0, 0, 8, 0, 4},
            new List<int> {6, 4, 0, 0, 0, 0, 0, 2, 7},
            new List<int> {1, 2, 8, 4, 7, 0, 0, 5, 6},
            new List<int> {2, 5, 1, 0, 6, 0, 0, 0, 8},
            new List<int> {0, 0, 0, 0, 0, 0, 0, 0, 0},
            new List<int> {8, 0, 0, 0, 5, 0, 2, 6, 0},
            new List<int> {0, 8, 0, 0, 3, 0, 0, 7, 0},
            new List<int> {5, 0, 2, 7, 4, 0, 0, 8, 3},
            new List<int> {3, 0, 7, 5, 0, 0, 4, 0, 2}
        };

        public static string run_cmd(string program, string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = program;
            start.Arguments = cmd;
            start.UseShellExecute = false; // Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true; // Any output, generated by application will be redirected back
            start.RedirectStandardError =
                true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string result = process.StandardError.ReadToEnd();
                    if (result == null || result == "")
                    {
                        result = reader.ReadToEnd();
                    }

                    return result;
                }
            }
        }

        public static string runPython(string filename, string cmd)
        {
            string cmd1 = string.Format("{0} {1}", filename, cmd);
            return run_cmd("python.exe", cmd1);
        }

        static void Main(string[] args)

        {
            if (1 > 0)
            {
                SudokuMarket sdm =
                    new SudokuMarket(soduku39);
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("from sympy import *");
                var cells = sdm.GetCellInfos().Values.ToList();
                foreach (var cell in cells)
                {
                    sb.AppendLine(string.Format("{0}= Symbol('{0}')", cell.variablename));
                }

                sb.AppendLine("print(solve([");

                for (int index = 0; index < 9; index++)
                {
                    var index1 = index;
                    AppendCondition1(cells, c => c.row == index1, sb);
                    AppendCondition1(cells, c => c.column == index1, sb);
                    AppendCondition1(cells, c => c.block == index1, sb);
                    AppendCondition2(cells, c => c.row == index1, sb);
                    AppendCondition2(cells, c => c.column == index1, sb);
                    AppendCondition2(cells, c => c.block == index1, sb);
                }

                var valuedCells = cells.Where(c => c.Value != 0);
                foreach (var cellInfo in valuedCells)
                {
                    sb.AppendLine(string.Format("    {0}{1},",cellInfo.variablename,GetCountValue(cellInfo)));
                }

                sb.AppendLine("     1-1");//消除逗号的影响
                sb.AppendLine(string.Format("],[{0}]))", string.Join(",", cells.Select(c => c.variablename))));

      
                File.WriteAllText("solveSudoku.py", sb.ToString());
                File.WriteAllText("solveSudoku.begintime.txt", DateTime.Now.ToString());
                Console.WriteLine("开始计算");
                string result = runPython("solveSudoku.py", "");
             
                File.WriteAllText("solveSudoku.endtime.txt", DateTime.Now.ToString());
                File.WriteAllText("solveSudoku.result", result);
                Console.WriteLine(result);
                Console.WriteLine("运算结束");
                Console.ReadKey();


                var breakin = 0;
            }
            else
            {
                var c1111 = new SudokuMarket(new SudokuBuilder().MakeSudoku()).Pearl.StrExpress;


                var testString =
                    "705602000640305100100000300200000000000000000000004269000000000010040980000098412"; //29个提示数的珍珠盘
                //testString = c1111;
                var test = StaticTools.IsPearl(testString);
                Console.WriteLine("    当前表达式是\r\n" + testString + "\r\n" + StaticTools.GetLocations(testString).Count);
                Console.WriteLine("输入数据的提示数个数为" + StaticTools.GetLocations(testString).Count);
                var c = new MoreClues().GetMoreNotice(testString, 39
                ); //26个提示数

                Console.WriteLine(c);
                Console.ReadKey();
                Console.ReadKey();
                Console.ReadKey();
                Console.ReadKey();
            }


            Console.ReadKey();
            return;
        }

        private static string GetCountValue(CellInfo cell)
        {
            if (cell.Value == 9)
            {
                return "+2";
            }

            if (cell.Value == 8)
            {
                return "+1";
            }
            else
            {
                return "-" + cell.Value;
            }

        }

        private static void AppendCondition1(List<CellInfo> cells, Func<CellInfo, bool> predicate, StringBuilder sb)
        {
            List<string> strtemp = cells.Where(predicate).Select(c => c.variablename).ToList();
            sb.AppendLine("    " + string.Join("+", strtemp) + "-25,");
       
        }

        private static void AppendCondition2(List<CellInfo> cells, Func<CellInfo, bool> predicate, StringBuilder sb)
        {
            List<string> strtemp = cells.Where(predicate).Select(c => c.variablename).ToList();
            sb.AppendLine("    " + string.Join("*", strtemp) + "-10080,");

        }

    

        private static bool GetNewClues()
        {
            var validString = "300000000000090032095300100200010009060003000050000840030007908600009450980150020";

            Console.WriteLine("输入数据的提示数个数为" + StaticTools.GetLocations(validString).Count);
            var newtest =
                StaticTools.IsPearl(validString);
            var result1 = new SudokuMarket(StaticTools.StringToList(validString)).SubMarkets;

            foreach (var c1 in result1)
            {
                if (StaticTools.IsPearl(c1.StrExpress))
                {
                    Console.WriteLine(c1.StrExpress + "已知数个数为" + StaticTools.GetLocations(c1.StrExpress).Count);
                }
            }


            return newtest;
        }
    }
}